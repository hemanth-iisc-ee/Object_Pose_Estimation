clear all;
close all;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
% Path to the directory containing data from Time of Flight (ToF) device
% Dataset used can be found at the following site
% url = https://www.dtic.ua.es/~agarcia/projects/multisensor_dataset

data_dir = './data/taz-primesense/'; % Change as required

% Video Writer
%vid = VideoWriter('tea_package','Motion JPEG AVI');
%vid.FrameRate = 1;
%open(vid);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
img_path = 'color_images/';        % RGB image dir 
pc_path = 'original_clouds/pcd/';  % Point cloud dir
mask_path = 'segmentation_masks/'; % Segementation mask dir

img_dir_list = dir([data_dir img_path '*.png']);
pc_dir_list = dir([data_dir pc_path '*.pcd']);
mask_dir_list = dir([data_dir mask_path '*.pbm']);

% Object segmentation masks are generated by background subtraction
% these segmentation masks are not perfect and require some pre-processing
%
% Pre-processing steps are
%  morphological dilation (structuring element: disk of 10 pixels)
%  followed by erosion (structuring element: disk of 12 pixels)
sd = strel('disk',10);
se = strel('disk',12);
c = 640; % image width
r = 480; % image height
n = r*c; % total number of pixels/depth values

R = eye(3); % initalize object orientation/rotation
T = zeros(3,1);% initialize object translation


% Load data corresponding to first frame
[ Y, Iy, Iy_lab] = load_frame( [img_dir_list(1).folder '\' img_dir_list(1).name],...
                        [pc_dir_list(1).folder '\' pc_dir_list(1).name], ...
                        [mask_dir_list(1).folder '\' mask_dir_list(1).name],...
                        sd, se);
                    
% Compute the point cloud midpoint and 3 axis for (object reference)
% display purposes
Xm = mean(Y')';
zAxis = Xm +[0 0 -0.1]';
yAxis = Xm + [0 -0.1 0 ]';
xAxis = Xm +[-0.1 0 0]';

fig_no = 1;


worst_rejct_ratio = 0.1; % proportion of bad matches to be rejected
alpha = 0.1; %Weight for image component in Nearest Neighbor search

% Loop over number of frames
for i = 2 : (length(mask_dir_list)-1)
    
    % make prev frame to be current
    X = Y;
    Ix = Iy;
    Ix_lab = Iy_lab;
    
   
    % Update orientation and position of object                     
    Xm_ = (R*Xm + T);
    xAxis_ = (R*xAxis + T);
    yAxis_ = (R*yAxis + T);
    zAxis_ = (R*zAxis + T);
    
    % Project points from world coordinates system to image coordinates
    [ref_cords_on_img] = world2img(cat(2,Xm_,xAxis_,yAxis_,zAxis_));    
    ref_cords_on_img = double(round(ref_cords_on_img));
    
    % Plot coordinate reference frame on the image
    plot_ref( Ix, ref_cords_on_img, fig_no);
    %dispImg = getframe(fig_no);
    %writeVideo(vid,dispImg.cdata);
    
     % load next frame
    [ Y, Iy, Iy_lab] = load_frame(  [img_dir_list(i).folder '\' img_dir_list(i).name],...
                                     [pc_dir_list(i).folder '\' pc_dir_list(i).name], ...
                                    [mask_dir_list(i).folder '\' mask_dir_list(i).name],...
                                    sd, se);
    
    % Use modified Iterative Closest Point (ICP) algorithm to estimate
    % rigid transformation of the object
    [Ri, Ti, ei, ti] = icp(Y,X,Iy_lab,Ix_lab,20,worst_rejct_ratio,alpha);
    
    % Update Transformation paramters
    R = Ri*R;
    T = Ri*T + Ti;      
end
%close(vid);
